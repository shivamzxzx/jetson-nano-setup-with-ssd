*****Author*****
  Shivam Singh
****************


======================Prerequisites========================
# A sd card
# A Usb drive(SSD,HDD)
# Jetson Nano
# Jumper wire to jump 'J48' pins
#You’ll need to power the developer kit with a good quality power supply that can deliver 5V⎓2A at the developer kit’s Micro-USB port. Not every power supply rated at “5V⎓2A” will actually do this. Or you can use 'DC Barrel jack for 5V power input' , but to use it you have to jump
the 'j48' pin. 
======================Setup Script=========================
#Flash a sd card with jetson nano image provide on their official website
#Reference - https://developer.nvidia.com/embedded/learn/get-started-jetson-nano-devkit#write
#To flash your sd card you can use "balenaetcher".(Recommended)

=============In case you want to use SSD===================
#After successfully running jetson nano from sd card attach usb drive(SSD,HDD etc), then follow below steps.

======================Transfer root========================
Reference - https://www.jetsonhacks.com/2019/04/25/jetson-nano-run-on-usb-drive/
#Both Sd card and usb drive are used at the end of the process as we cannot boot from ssd because bootloader doen't support usb3.0

git clone https://github.com/JetsonHacksNano/rootOnUSB
cd rootOnUSB/

#Depending on which version of L4T you are running, 
you may have to “git checkout” the appropriate release 
to match the release you are running.

git checkout vL4T32.2.1
./addUSBToInitramfs.sh
./copyRootToUSB.sh -p /dev/sdb1(path to your usb device)

#Modify the /boot/extlinux/extlinux.conf file. An entry should be added to point to the new rootfs (typically this is /dev/sda1). There is a sample configuration file: sample-extlinux.conf

You should make a backup of the original extlinux.conf file. Also, when you edit the file you should make a backup of the original configuration and relabel the backup. This will allow you to access an alternate boot method from the serial console in case something goes sideways.

Then you should changed the INITRD line to:

  ```
INITRD /boot/initrd-xusb.img
```

So that the system uses the initramfs that we built that includes the USB firmware. Then set the root to the USB drive.

Here are some examples. You can set the drive by the UUID of the disk drive, the volume label of the drive, or the device path:

```
APPEND ${cbootargs} root=UUID=0e437280-bea0-42a2-967f-a240dd3075eb rootwait rootfstype=ext4
APPEND ${cbootargs} root=LABEL=JetsonNanoSSD500 rootwait rootfstype=ext4
APPEND ${cbootargs} root=/dev/sda1 rootwait rootfstype=ext4
  ```

The first entry is most specific, the last most generic. Note that you are not guaranteed that a USB device is enumerated in a certain order and will always have the same device path. That is, if you leave another USB drive plugged in along with your root disk when you boot the Jetson, the root disk may have a different path than originally, such as /dev/sdb1.
Also, there is a convenience file: diskUUID.sh which will determine the UUID of a given device. This is useful for example to determine the UUID of the USB drive. Note: If the UUID returned is not similar in length to the above example, then it is likely that the device is not formatted as ext4.

```
$ ./diskUUID.sh
```

While this defaults to sda1 (/dev/sda1), you can also determine other drive UUIDs. The /dev/ is assumed, use the -d flag. For example:

```
$ ./diskUUID.sh -d sdb1

================Deepstream Installation=====================
Reference - https://docs.nvidia.com/metropolis/deepstream/dev-guide/index.html

# Download deepstream sdk from nvidia website
Reference - https://developer.nvidia.com/deepstream-download(You might need to login)

sudo apt install \
    libssl1.0.0 \
    libgstreamer1.0-0 \
    gstreamer1.0-tools \
    gstreamer1.0-plugins-good \
    gstreamer1.0-plugins-bad \
    gstreamer1.0-plugins-ugly \
    gstreamer1.0-libav \
    libgstrtspserver-1.0-0 \
    libjansson4=2.11-1

apt-get install librdkafka1=0.11.3-1build1

#Download the DeepStream 4.0.1 Jetson tar package, deepstream_sdk_v4.0.1_jetson.tbz2, to the Jetson device.


tar -xpvf deepstream_sdk_v4.0.1_jetson.tbz2
cd deepstream_sdk_v4.0.1_jetson
sudo tar -xvpf binaries.tbz2 -C /
sudo ./install.sh
sudo ldconfig
sudo nvpmodel -m 0 
sudo jetson_clocks
==============Install Gstreamer===============================
sudo apt-get install libgstreamer-plugins-base1.0-dev libgstreamer1.0-dev libgstrtspserver-1.0-dev libx11-dev

==============Install JRE,JDK=================================
sudo apt install default-jre
sudo apt install default-jdk
java --version

==============Install Kafka(A msg broker)======================
Reference - https://kafka.apache.org/quickstart
tar -xzf kafka_2.12-2.3.0.tgz
cd kafka_2.12-2.3.0

==============Start the zookeeper server=======================
bin/zookeeper-server-start.sh config/zookeeper.properties

==============Start the kafka server===========================
bin/kafka-server-start.sh config/server.properties

===Create a topic, replace "test" by your prefered topic name== 
bin/kafka-topics.sh --create --bootstrap-server localhost:9092 --replication-factor 1 --partitions 1 --topic test

#For more refer the official kafka wesite, link is provided above.

===================Configuring deepstream======================
#In this pass we will configure the deepstream sdk to take stream from a camera and pass the results to the kafka consumer
cd deepstream_sdk_v4.0.1_jetson/sources/apps/sample_apps/deepstream-test5/
make
cd deepstream_sdk_v4.0.1_jetson/sources/apps/sample_apps/deepstream-test5/configs
sudo vim test5_dec_infer-resnet_tracker_sgie_tiled_display_int8.txt
===================Sample config file==========================
===============================================================
cd ..
./deepstream-test5-app -c configs/test5_dec_infer-resnet_tracker_sgie_tiled_display_int8.txt -p 0

#For RTSP streaming input, in the configuration file’s [streammux]
group, set live-source=1. Also make sure that all [sink#] groups have the
sync property set to 0.

===============================================================
Sample commands - deepstream-test4-app -i /home/shivam/deepstream_sdk_v4.0.1_jetson/samples/streams/sample_720p.h264 -p /opt/nvidia/deepstream/deepstream-4.0/lib/libnvds_kafka_proto.so --conn-str=localhost;9092;test


For cuda error(nvcc --version):
--> export PATH=${PATH}:/usr/local/cuda/bin
--> export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/usr/local/cuda/lib64

=========================RTSP URL==============================

Url --> rtsp://admin:Parkzap_123@192.168.1.71:554

================****IMPORTANT****==============================

Note that the width and the height of streammux must be set accordingly to your camera stream settings or it won't work.

==================Deepstrea-app config=========================
Check the file in the repo by name "deepstream-app_config"


==================Deepstream-test5 config======================
Check the file in the repo by name "deepstream-test5_config"


============================deepstream-test5===================
In order to run the tracker in this deepstream-test5 two files are shared by 
nvidia as a quick fix. Please copy those files from the repository folder
to the below mentioned location.

--> sudo cp libgstnvegltransform.so /usr/lib/aarch64-linux-gnu/gstreamer-1.0/libgstnvegltransform.so
--> sudo cp libnvbufsurftransform.so /usr/lib/aarch64-linux-gnu/tegra/libnvbufsurftransform.so.1.0.0



